var documenterSearchIndex = {"docs":
[{"location":"#Barriers.jl","page":"Barriers.jl","title":"Barriers.jl","text":"","category":"section"},{"location":"#Barrier-factories","page":"Barriers.jl","title":"Barrier factories","text":"","category":"section"},{"location":"","page":"Barriers.jl","title":"Barriers.jl","text":"Barrier\nfuzzy_barrier\nfuzzy_reduce_barrier\nreduce_barrier","category":"page"},{"location":"#Barriers.Barrier","page":"Barriers.jl","title":"Barriers.Barrier","text":"Barrier(ntasks::Integer) -> barrier\n\nCreates a barrier for ntasks tasks.  Call cycle!(barrier[i]) in i-th task for waiting for other tasks to arrive at the same phase.\n\n\n\n\n\n","category":"type"},{"location":"#Barriers.fuzzy_barrier","page":"Barriers.jl","title":"Barriers.fuzzy_barrier","text":"fuzzy_barrier(ntasks::Integer) -> barrier::Barrier\n\n\n\n\n\n","category":"function"},{"location":"#Barrier-constructors","page":"Barriers.jl","title":"Barrier constructors","text":"","category":"section"},{"location":"","page":"Barriers.jl","title":"Barriers.jl","text":"CentralizedBarrier\nDisseminationBarrier\nFlatTreeBarrier\nFuzzyBarrier\nStaticTreeBarrier\nTreeBarrier","category":"page"},{"location":"#Synchronizing-operations","page":"Barriers.jl","title":"Synchronizing operations","text":"","category":"section"},{"location":"","page":"Barriers.jl","title":"Barriers.jl","text":"cycle!\narrive!\ndepart!\nreduce!\nreduce_arrive!","category":"page"},{"location":"#Barriers.cycle!","page":"Barriers.jl","title":"Barriers.cycle!","text":"cycle!(barrier[i])\n\nUsing a barrier::Barrier, signal that i::Integer-th thread reached a certain phase of the program and wait for other tasks to reach the same phase.\n\nExamples\n\njulia> using Barriers\n\njulia> xs = [1:3;];\n\njulia> barrier = Barrier(3);\n\njulia> @sync for i in 1:3\n           Threads.@spawn begin\n               x = i^2\n               xs[i] = x\n               cycle!(barrier[i])\n               xs[mod1(i + 1, 3)] -= x\n           end\n       end\n\njulia> xs\n3-element Vector{Int64}:\n -8\n  3\n  5\n\n\n\n\n\n","category":"function"},{"location":"#Barriers.arrive!","page":"Barriers.jl","title":"Barriers.arrive!","text":"arrive!(barrier[i])\n\nSignal that i::Integer-th thread reached a certain phase but postpone the synchronization for the departure.\n\nNote that not all Barrier subtypes support arrive!.\n\nSee fuzzy_barrier, depart!.\n\n\n\n\n\n","category":"function"},{"location":"#Barriers.depart!","page":"Barriers.jl","title":"Barriers.depart!","text":"depart!(barrier[i])\n\nWait for all calls to arrive!(barrier[i]) or reduce_arrive!(barrier[i], _) for i = 1, 2, ..., ntasks.\n\nNote that not all Barrier subtypes support depart!.\n\nSee fuzzy_barrier, arrive!, reduce_arrive!.\n\n\n\n\n\n","category":"function"},{"location":"#Barriers.reduce_arrive!","page":"Barriers.jl","title":"Barriers.reduce_arrive!","text":"reduce_arrive!(barrier[i])\n\n\n\n\n\n","category":"function"}]
}
